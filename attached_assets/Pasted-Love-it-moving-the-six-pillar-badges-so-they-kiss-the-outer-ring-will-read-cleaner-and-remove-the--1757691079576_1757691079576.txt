Love it—moving the six pillar badges so they “kiss” the outer ring will read cleaner and remove the ambiguity that they’re between 2 and 3. Here’s exactly what to do.

What we’re trying to achieve

Place each C/O/R/T/E/X badge so its inner edge just touches the outside edge of the outermost radar ring. That means we compute the badge orbit from geometry (outer ring radius + half its stroke + the radius of the visible badge circle), not a hard-coded number. This stays perfect if you later change ring sizes or badge sizes.

Implementation steps (precise)
	1.	Choose which badge circle should touch the ring.
You currently draw two circles for each badge:
	•	outer “pulse” circle: r=26 (with stroke + low-opacity fill)
	•	inner core: r=17.5
For a clean kiss without overlap, we’ll use the outer pulse circle as the touching geometry. If you’d rather the core touches, see the variant below.
	2.	Declare the geometry constants (put near your other geometry constants).

// --- Geometry (add/adjust these) ---
const OUTER_RING_INDEX = RINGS.length - 1;
const OUTER_RING_R = RINGS[OUTER_RING_INDEX];

// Keep this in sync with the stroke used when drawing the OUTER ring.
// If you changed it per our last pass, it's ~1.8.
const OUTER_RING_STROKE = 1.8;

// Which visual radius should "kiss" the ring?
const NODE_PULSE_R = 26;   // outer, animated ring around the letter
const NODE_CORE_R  = 17.5; // inner filled circle

// Zero means perfect kiss. Use +1 to leave a 1px air gap if you see overlap on some displays.
const TOUCH_GAP = 0;

	3.	Compute the new orbit dynamically and use it for node positions.

// Place badge centers so the inner edge of the pulse circle touches the ring.
const NODE_ORBIT =
  OUTER_RING_R + OUTER_RING_STROKE / 2 + NODE_PULSE_R + TOUCH_GAP;

// Where badges live now (replace your previous NODE_ORBIT usage)
const nodePositions = angles.map((a) => ({
  x: C + NODE_ORBIT * Math.cos(a),
  y: C + NODE_ORBIT * Math.sin(a),
}));

	4.	(Optional but recommended) Ensure crisp rendering
	•	Keep vectorEffect="non-scaling-stroke" and shapeRendering="geometricPrecision" on rings/spokes.
	•	If the badge halo appears to overlap the ring visually, set TOUCH_GAP = 1 (a 1px air gap looks intentional and avoids anti-aliasing artifacts).
	5.	No other changes needed.
Rings remain in their group; badges are already drawn after rings, which is fine because they’re outside the ring.

⸻

Variant: if you want the core circle to touch instead

Swap the orbit formula:

const NODE_ORBIT =
  OUTER_RING_R + OUTER_RING_STROKE / 2 + NODE_CORE_R + TOUCH_GAP;

Then consider slightly increasing the pulse radius (e.g., NODE_PULSE_R = 28) so the halo doesn’t visually “intrude” back over the ring.

⸻

Sanity checks (quick QA)
	•	Snap test: zoom your browser to 80% and 125%; the kiss should stay exact.
	•	Theme test: toggle dark/light; ring edge should remain visible where the badge touches.
	•	Accessibility test: keyboard-focus a badge; ensure focus ring doesn’t obscure the kiss (add outline-offset: 2px if needed).

⸻

Confidence
	•	High on the geometry and code change—this will place badges exactly outside and touching the outer ring.
	•	High that it remains stable across breakpoints and zoom due to formulaic orbit + non-scaling strokes.
	•	Medium on whether you prefer pulse-touch vs core-touch; both look good—pick based on how prominent you want the halo near the ring.
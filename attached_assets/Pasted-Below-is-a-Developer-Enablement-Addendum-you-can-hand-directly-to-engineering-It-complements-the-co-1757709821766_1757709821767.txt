Below is a Developer Enablement Addendum you can hand directly to engineering.
It complements the content packs you already have (CORTEX + Options Studio) and focuses on implementation quality, consistency, performance, accessibility, and observability—so the experience feels premium, reliable, and “MIT‑level.”

⸻

0) Objectives (why this doc exists)
	•	Ensure the site looks and feels elite without changing core flows.
	•	Keep code clean, testable, and future‑proof; make content easy to update.
	•	Ship an impressive one‑off experience with excellent print/export, a11y, and telemetry.
	•	Provide developers everything they need (tokens, patterns, schemas, events, budgets) in one place.

⸻

1) Design Tokens (CSS variables) — Light / Dark

Use CSS custom properties at :root and [data-theme="dark"]. Tailwind can read these via plugin or theme.extend.colors.

:root {
  /* Core palette (MIT-inspired, not official brand) */
  --color-cardinal: #A31F34;          /* accent / action */
  --color-ink: #0A0A0B;               /* primary text */
  --color-slate-900: #0F172A;         /* headings */
  --color-slate-700: #334155;         /* body text */
  --color-slate-500: #64748B;         /* muted */
  --color-border: #E5E7EB;            /* dividers */
  --color-surface: #FFFFFF;           /* page bg */
  --color-panel: #F8FAFC;             /* cards */
  --color-info: #0EA5E9;              /* info accent */
  --color-success: #10B981;
  --color-warn: #F59E0B;
  --color-danger: #EF4444;

  /* Component tokens */
  --radius-sm: 6px;
  --radius-md: 10px;
  --radius-lg: 14px;

  --shadow-1: 0 1px 2px rgba(0,0,0,0.05);
  --shadow-2: 0 6px 20px rgba(0,0,0,0.08);

  /* Typography scale */
  --font-sans: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
  --font-serif: 'Crimson Text', Georgia, serif;

  --fs-xs: 12px;
  --fs-sm: 14px;
  --fs-base: 16px;
  --fs-md: 18px;
  --fs-lg: 20px;
  --fs-xl: 24px;
  --fs-2xl: 28px;
  --fs-3xl: 34px;
  --fs-4xl: 42px;

  /* Motion */
  --ease: cubic-bezier(.2,.8,.2,1);
  --dur-fast: 150ms;
  --dur-med: 240ms;
}

[data-theme="dark"] {
  --color-ink: #F9FAFB;
  --color-slate-900: #E5E7EB;
  --color-slate-700: #CBD5E1;
  --color-slate-500: #94A3B8;
  --color-border: #1F2937;
  --color-surface: #0B0F14;
  --color-panel: #0F172A;
  --shadow-1: 0 1px 2px rgba(0,0,0,0.4);
  --shadow-2: 0 8px 28px rgba(0,0,0,0.55);
}

Usage guidance
	•	Headings: font-family: var(--font-sans); color: var(--color-slate-900);
	•	Body: color: var(--color-slate-700);
	•	Muted text: color: var(--color-slate-500);
	•	Primary button background: var(--color-cardinal) with :hover brightness +5%.

⸻

2) Tailwind Integration (theme extend snippet)

// tailwind.config.js
export default {
  darkMode: ['class', '[data-theme="dark"]'],
  theme: {
    extend: {
      colors: {
        ink: 'var(--color-ink)',
        cardinal: 'var(--color-cardinal)',
        surface: 'var(--color-surface)',
        panel: 'var(--color-panel)',
        info: 'var(--color-info)',
        success: 'var(--color-success)',
        warn: 'var(--color-warn)',
        danger: 'var(--color-danger)',
        border: 'var(--color-border)',
        slate900: 'var(--color-slate-900)',
        slate700: 'var(--color-slate-700)',
        slate500: 'var(--color-slate-500)',
      },
      borderRadius: {
        sm: 'var(--radius-sm)',
        md: 'var(--radius-md)',
        lg: 'var(--radius-lg)',
      },
      boxShadow: {
        'elev-1': 'var(--shadow-1)',
        'elev-2': 'var(--shadow-2)',
      },
      fontFamily: {
        sans: 'var(--font-sans)',
        serif: 'var(--font-serif)',
      },
      transitionTimingFunction: {
        brand: 'var(--ease)',
      },
      transitionDuration: {
        fast: 'var(--dur-fast)',
        med: 'var(--dur-med)',
      }
    }
  }
}


⸻

3) Component Inventory & Usage (CORTEX + Options Studio)

Global
	•	AppHeader: slim identity bar (“CORTEX — MIT Open Learning”), Help → Glossary.
	•	AppShell: max-w-6xl grid, generous whitespace (py-12 md:py-16), consistent card padding (p-6 md:p-8).

Context Profile
	•	SliderRow: label left, value badge right, description below.
	•	GatePreview: small chips preview appear after submit if any triggers.

Pulse Check
	•	PulseItem: statement with Yes/No toggle; optional confidence (v2).
	•	SectionNav: sticky “C/O/R/T/E/X” tabs with progress dots.

Results
	•	Honeycomb: equal‑area rings; alt table for a11y/export.
	•	GateCallout: pill + one‑line reason + “Learn more” → micro‑guide drawer.
	•	DomainCard: Why / What Good Looks Like / How It Improves / Pitfalls / Discussion.
	•	ExportBar: PDF + JSON; (optional) “Generate Executive Brief” button (AI integration).

Options Studio
	•	Intro: lenses legend; “Start learning” CTA scrolls to quiz.
	•	MisconceptionQuiz: 5 T/F with inline feedback.
	•	UseCaseAnchor (optional): one line + up to 2 goals.
	•	OptionGrid: 9 cards; each opens Drawer with full template.
	•	CompareBar: pick any 2 → Seven Lenses plot + side‑by‑side.
	•	Reflection: two prompts; save for export.
	•	SummaryExport: merges with main export.

Glossary
	•	Inline tooltips + dedicated /glossary for full terms.

⸻

4) Routing & State (no re-architecture)
	•	/ → Executive Onboarding (non‑marketing)
	•	/context → Context Profile
	•	/pulse → Pulse 18
	•	/results → Honeycomb, Gates, Domain Cards, Export
	•	/decide → Options Studio (stand‑alone)
	•	/glossary → Glossary

State model (TypeScript)

type ContextProfile = {
  regulatory_intensity: 0|1|2|3|4;
  data_sensitivity:    0|1|2|3|4;
  safety_criticality:  0|1|2|3|4;
  brand_exposure:      0|1|2|3|4;
  clock_speed:         0|1|2|3|4;
  latency_edge:        0|1|2|3|4;
  scale_throughput:    0|1|2|3|4;
  data_advantage:      0|1|2|3|4;
  build_readiness:     0|1|2|3|4;
  finops_priority:     0|1|2|3|4;
  procurement_constraints: boolean;
  edge_operations:         boolean;
};

type PulseScores = { C:0|1|2|3; O:0|1|2|3; R:0|1|2|3; T:0|1|2|3; E:0|1|2|3; X:0|1|2|3; };

type Gates = {
  hitl: boolean; assurance: boolean; residency: boolean; latency: boolean;
  scale: boolean; buildReadiness: boolean; procurement: boolean; edgeOps: boolean;
};

type ValueOverlay = {
  [pillar in keyof PulseScores]: {
    metric_id: string; name: string; baseline?: number|null; target?: number|null; unit: string; cadence: 'monthly'|'quarterly';
  }
};

type OptionsStudioState = {
  misconceptions: { id: string; correct: boolean }[];
  useCaseTitle?: string;
  goals?: ('speed'|'quality'|'compliance'|'cost')[];
  viewedOptionIds: string[];
  compared?: [string, string] | null;
  reflections?: { promising: string; lens: string };
};


⸻

5) Honeycomb (equal‑area) — math & snippet

Rule: ring radius must be proportional to √(stage/N). For 4 stages (0–3 filled):

const rMax = 1; // normalized
function radiusFor(stage: 0|1|2|3) {
  return Math.sqrt(stage / 3) * rMax;
}

Hex points (unit hex):

function hexPoint(angleDeg: number, r: number) {
  const a = (Math.PI/180) * angleDeg;
  return [Math.cos(a)*r, Math.sin(a)*r] as const;
}
// 6 vertices: 90°, 150°, 210°, 270°, 330°, 30°

Use Canvas (smooth) or SVG (crisp). Provide alt table: [{pillar:'C',score:2}, …].

⸻

6) Accessibility Checklist (AA target)
	•	Color contrast: all text ≥ 4.5:1; large text ≥ 3:1.
	•	Keyboard: tab order logical; all dialogs focus‑trapped; ESC closes.
	•	ARIA: role="dialog" for drawers, labelled by heading; aria-describedby for body.
	•	Motion: respect prefers-reduced-motion; reduce hover scales and animated charts.
	•	Skip links: to main, to results.
	•	Forms: explicit <label for>; hit area ≥ 40px; error text and icons.

⸻

7) Performance Budget & Techniques
	•	Budgets: LCP < 2.5s, CLS < 0.1, INP < 200ms, JS bundle < 200KB initial.
	•	Fonts: display: swap, preload primary font; only two families.
	•	Images: SVG for motifs; avoid hero photos; lazy‑load non‑critical drawers.
	•	Code‑split Options Studio drawer content; prefetch on hover.
	•	Static content (cards, micro‑guides) load from JSON; cache aggressively.

⸻

8) Export (PDF + JSON) — layout spec

PDF sections (in order)
	1.	Cover: CORTEX title, org, date, facilitator
	2.	Context Summary: sliders/flags (inline bars)
	3.	Honeycomb + alt table
	4.	Critical Requirements (gates) with 1‑line “why”
	5.	Domain Cards (Why/Good/How/Pitfalls bullets only)
	6.	Value Overlay (selected metrics)
	7.	Options Studio Summary: options viewed/compared, top two, lenses chosen, corrected myths, reflections
	8.	Glossary (short)

Print CSS
	•	A4/Letter friendly; page numbers; widows/orphans handling; monochrome safe.

JSON snapshot
	•	{ profile, scores, gates, value_overlay, optionsStudioState, version: 'cortex-3.2' }

⸻

9) Telemetry & Analytics (privacy‑respecting)

Events (no PII):
	•	context.submitted { regulated, sensitivity, edge, readiness }
	•	pulse.submitted { C,O,R,T,E,X }
	•	results.viewed { gatesCount, weakest:['O','T'] }
	•	microguide.opened { id: 'gate.assurance' | 'pillar.O.deep' }
	•	export.pdf { sectionsIncluded: ['honeycomb','gates','options'] }
	•	options.viewed { optionId }
	•	options.compared { a, b }
	•	misconception.answered { id, correct }
	•	reflection.saved { lens }

Storage: anonymized session ID; no org names unless user entered it for export; do not log free‑text reflections.

⸻

10) Error/Empty/Skeleton States
	•	No profile but navigating to /results → Explain and link to /context.
	•	No pulse answers → guard page.
	•	Export failure → show retry + “Email me this link” fallback.
	•	Options content not loaded → skeleton grid (9 cards); toast on failure.
	•	Network → offline banner; allow working with cached content and local state.

⸻

11) Feature Flags (for safe rollout)
	•	ff.optionsStudio (default ON)
	•	ff.execBriefAI (default OFF; hides “Generate Executive Brief”)
	•	ff.valueOverlayTargets (default ON; allows baseline/target entry)
	•	ff.darkMode (ON)

Use a simple env‑based flag util so workshops can toggle per client.

⸻

12) Content System & File Layout

/content
  /cortex
    pulse.json                 // 18 items with ids
    microguides/
      gate.assurance.md
      gate.hitl.md
      pillar.O.deep.md
      ...
    glossary.json
  /options
    options_catalog_v1.json    // the 9 OptionCard objects (from the reference)
    misconceptions.json
    lenses.json                // labels & descriptions

	•	Parsing: load MD to HTML once at build; keep IDs stable.
	•	Non‑dev edits: content team can update .md and .json safely.

⸻

13) QA Scenarios (high‑value tests)
	•	Gates firing: high regulation + high sensitivity → see HITL, Assurance, Residency; tooltips show “why”.
	•	Equal‑area rings: verify areas visually and with test values 0..3.
	•	Options Studio:
	•	With build_readiness=0 → “Build later” chips appear on light_ft / heavy_ft.
	•	With latency_edge=4 → edge_small_models emphasized; latency cautions visible.
	•	Compare rag vs light_ft → lenses differ as expected (data leverage vs control).
	•	Export: PDF includes all sections + page numbers; JSON schema validates.

⸻

14) Security & Privacy Guardrails
	•	No PII in state, telemetry, or prompts (if AI brief enabled).
	•	Reflections: store locally; only included in export if user clicks “Include reflections.”
	•	Vendor terms: if any API keys exist for AI generation, use no‑retention endpoints.
	•	CSP: default‑src self; font/img whitelists; block inline scripts.

⸻

15) Definition of Done (acceptance)
	1.	Visuals implement tokens (color/typography/spacing) and pass contrast.
	2.	Honeycomb uses equal‑area math; alt table present; mobile readable.
	3.	Results show gates with drawer micro‑guides; tooltips explain “why this gate.”
	4.	Options Studio runs end‑to‑end without altering CORTEX scores; Compare works; Reflection saved.
	5.	PDF + JSON export includes both CORTEX snapshot and Options Studio summary.
	6.	Telemetry events fire; no PII logged; flags honored.
	7.	Performance budgets met; a11y audit (AA) passes.

⸻

16) Nice‑to‑Have (if time remains)
	•	Keyboard shortcuts: 1–6 for pillars; g to open next gate; c compare mode.
	•	Copy to clipboard: per Domain Card (one‑click copy of bullets for notes).
	•	In‑app timer: subtle progress indicator (“~15 minutes total”).

⸻

Closing note

This addendum gives you everything to ship with confidence: tokens, components, math, schemas, export, telemetry, a11y, and QA. If you need seed files (options_catalog_v1.json, misconceptions.json, glossary.json) I can provide them formatted exactly to the schemas above so you can drop them into /content and go.